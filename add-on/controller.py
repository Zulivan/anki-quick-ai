from aqt import mw
from aqt.utils import showInfo
from aqt.operations import QueryOp

import openai
import playsound
import os
import threading

from .anki import get_words
from .gpt import call_openai, make_edge_tts_mp3



def _get_story_from_ai(browse_cmd):
    config = mw.addonManager.getConfig(__name__)
    openai.api_key = config["api_key"]
    story_lang = config["story_language"]
    trans_lang = config["trans_language"]
    model = config["model"]

    words = get_words(browse_cmd)

    prompt = config["prompt"].format(language=story_lang, words=words)
    story = call_openai(prompt,  model)

    prompt_trans = config["prompt_translation"].format(text=story, language=trans_lang)
    trans_story = call_openai(prompt_trans, model)

    if mw.addonManager.getConfig(__name__)["play_sound"]:
        if not os.path.exists(os.path.join(os.path.dirname(__file__), "output")):
            os.makedirs(os.path.join(os.path.dirname(__file__), "output"))
        make_edge_tts_mp3(story, story_lang, os.path.join(os.path.dirname(__file__), "output", "story.mp3"))
        make_edge_tts_mp3(trans_story, trans_lang, os.path.join(os.path.dirname(__file__), "output", "translated_story.mp3"))

    return words, story, trans_story


def _show_story_and_play_sound(words, story, trans_story):
    # play sound
    if mw.addonManager.getConfig(__name__)["play_sound"]:
        music_thread = threading.Thread(target=_play_sound)
        music_thread.start()

    # show story
    color = 'green'
    words_str = '<br>'.join(words)
    showInfo(f"<font color='{color}'>Today's Words:</font><br>{words_str}<br><br><font color='{color}'>Article Generated by ChatGPT:</font><br><br>{story}<br><br><font color='{color}'>Translation Generated by ChatGPT:</font><br><br>{trans_story}")


def _play_sound():
    playsound.playsound(os.path.join(os.path.dirname(__file__), "output", "story.mp3"))
    playsound.playsound(os.path.join(os.path.dirname(__file__), "output", "translated_story.mp3"))


def gen_words_story() -> None:
    op_story = QueryOp(
        # the active window (main window in this case)
        parent=mw,
        # the operation is passed the collection for convenience; you can
        # ignore it if you wish
        op=lambda col: _get_story_from_ai(mw.addonManager.getConfig(__name__)["query"]),
        # this function will be called if op completes successfully,
        # and it is given the return value of the op
        success=lambda x: _show_story_and_play_sound(x[0], x[1], x[2])
    )

    op_story.with_progress().run_in_background()
